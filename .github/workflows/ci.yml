name: Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      neo4j:
        image: neo4j:5.14
        env:
          NEO4J_AUTH: neo4j/test_password
        ports:
          - 7687:7687
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Lint with flake8
      run: |
        uv run flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        uv run mypy app/ --ignore-missing-imports
    
    - name: Security check with bandit
      run: |
        uv run bandit -r app/ -f json -o bandit-report.json
    
    - name: Run tests
      run: |
        uv run pytest --cov=app --cov-report=xml --cov-report=html
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_PASSWORD: test_password
        FIRESTORE_PROJECT_ID: test-project
        FIRESTORE_EMULATOR_HOST: localhost:8080
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t memoire-backend:${{ github.sha }} .
        docker tag memoire-backend:${{ github.sha }} memoire-backend:latest
    
    - name: Run security scan
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $HOME/Library/Caches:/root/.cache/ \
          aquasec/trivy:latest image memoire-backend:latest
    
    - name: Test Docker image
      run: |
        docker run -d --name test-backend -p 8000:8000 \
          -e FIRESTORE_PROJECT_ID=test \
          -e NEO4J_PASSWORD=test \
          memoire-backend:latest
        sleep 10
        curl -f http://localhost:8000/api/v1/health || exit 1
        docker stop test-backend
        docker rm test-backend