# Docker Compose for Output Management & Publishing System
# Includes all necessary services for development and testing

version: '3.8'

services:
  # Main Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        DEV_MODE: "true"
    container_name: memoire-output-management
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port
    environment:
      - APP_ENVIRONMENT=development
      - APP_DEBUG=true
      - FIRESTORE_EMULATOR_HOST=firestore:8080
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=DEBUG
    volumes:
      - ./app:/app/app:ro
      - ./tests:/app/tests:ro
      - ./templates:/app/templates:ro
      - ./config:/app/config:ro
      - uploads_data:/app/uploads
      - outputs_data:/app/outputs
      - previews_data:/app/previews
      - cache_data:/app/cache
      - logs_data:/app/logs
    depends_on:
      - neo4j
      - redis
      - firestore
    networks:
      - memoire-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Neo4j Database for Storyline Graphs
  neo4j:
    image: neo4j:5.14-community
    container_name: memoire-neo4j
    ports:
      - "7474:7474"  # Web interface
      - "7687:7687"  # Bolt protocol
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial_size=256m
      - NEO4J_dbms_memory_heap_max_size=512m
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - memoire-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7474 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # Redis for Caching and Background Tasks
  redis:
    image: redis:7-alpine
    container_name: memoire-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - memoire-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Firestore Emulator for Development
  firestore:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:latest
    container_name: memoire-firestore
    ports:
      - "8080:8080"  # Firestore emulator
      - "4000:4000"  # Emulator UI
    command: >
      sh -c "
        gcloud config set project memoire-dev &&
        gcloud emulators firestore start --host-port=0.0.0.0:8080
      "
    environment:
      - FIRESTORE_PROJECT_ID=memoire-dev
    volumes:
      - firestore_data:/opt/data
    networks:
      - memoire-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: memoire-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - memoire-network
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: memoire-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - memoire-network
    restart: unless-stopped
    profiles: ["monitoring"]
    depends_on:
      - prometheus

  # Nginx for Load Balancing and Static Files (Production)
  nginx:
    image: nginx:alpine
    container_name: memoire-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - static_data:/usr/share/nginx/html/static
      - outputs_data:/usr/share/nginx/html/outputs
    depends_on:
      - app
    networks:
      - memoire-network
    restart: unless-stopped
    profiles: ["production"]

  # Celery Worker for Background Tasks (Optional)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: memoire-celery-worker
    command: celery -A app.celery worker --loglevel=info --concurrency=2
    environment:
      - APP_ENVIRONMENT=development
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - FIRESTORE_EMULATOR_HOST=firestore:8080
    volumes:
      - ./app:/app/app:ro
      - uploads_data:/app/uploads
      - outputs_data:/app/outputs
      - cache_data:/app/cache
      - logs_data:/app/logs
    depends_on:
      - redis
      - neo4j
      - firestore
    networks:
      - memoire-network
    restart: unless-stopped
    profiles: ["background-tasks"]

  # Celery Beat for Scheduled Tasks (Optional)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: memoire-celery-beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - APP_ENVIRONMENT=development
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./app:/app/app:ro
      - logs_data:/app/logs
    depends_on:
      - redis
    networks:
      - memoire-network
    restart: unless-stopped
    profiles: ["background-tasks"]

  # Flower for Celery Monitoring (Optional)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: memoire-flower
    command: celery -A app.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - memoire-network
    restart: unless-stopped
    profiles: ["background-tasks"]

networks:
  memoire-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Application Data
  uploads_data:
    driver: local
  outputs_data:
    driver: local
  previews_data:
    driver: local
  cache_data:
    driver: local
  logs_data:
    driver: local
  static_data:
    driver: local

  # Database Data
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  firestore_data:
    driver: local
  redis_data:
    driver: local

  # Monitoring Data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Override for different environments
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
# Create docker-compose.prod.yml for production overrides